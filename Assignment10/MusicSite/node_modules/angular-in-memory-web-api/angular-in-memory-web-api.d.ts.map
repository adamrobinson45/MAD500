{"version":3,"file":"angular-in-memory-web-api.d.ts","sources":["angular-in-memory-web-api.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v0.0.0\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpBackend } from '@angular/common/http';\r\nimport { HttpEvent } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { HttpRequest } from '@angular/common/http';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { HttpXhrBackend } from '@angular/common/http';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Type } from '@angular/core';\r\nimport { XhrFactory } from '@angular/common';\r\n\r\n/**\r\n * Base class for in-memory web api back-ends\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n */\r\nexport declare abstract class BackendService {\r\n    protected inMemDbService: InMemoryDbService;\r\n    protected config: InMemoryBackendConfigArgs;\r\n    protected db: {\r\n        [key: string]: any;\r\n    };\r\n    protected dbReadySubject: BehaviorSubject<boolean> | undefined;\r\n    private passThruBackend;\r\n    protected requestInfoUtils: RequestInfoUtilities;\r\n    constructor(inMemDbService: InMemoryDbService, config?: InMemoryBackendConfigArgs);\r\n    protected get dbReady(): Observable<boolean>;\r\n    /**\r\n     * Process Request and return an Observable of Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'customers' collection\r\n     *   GET api/customers          // all customers\r\n     *   GET api/customers/42       // the character with id=42\r\n     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or\r\n     * 'J' GET api/customers.json/42  // ignores the \".json\"\r\n     *\r\n     * Also accepts direct commands to the service in which the last segment of the apiBase is the\r\n     * word \"commands\" Examples: POST commands/resetDb, GET/POST commands/config - get or (re)set the\r\n     * config\r\n     *\r\n     *   HTTP overrides:\r\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n     *     The request is forwarded to that method as in\r\n     *     `inMemDbService.get(requestInfo)`\r\n     *     which must return either an Observable of the response type\r\n     *     for this http library or null|undefined (which means \"keep processing\").\r\n     */\r\n    protected handleRequest(req: RequestCore): Observable<any>;\r\n    protected handleRequest_(req: RequestCore): Observable<any>;\r\n    /**\r\n     * Add configured delay to response observable unless delay === 0\r\n     */\r\n    protected addDelay(response: Observable<any>): Observable<any>;\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    protected applyQuery(collection: any[], query: Map<string, string[]>): any[];\r\n    /**\r\n     * Get a method from the `InMemoryDbService` (if it exists), bound to that service\r\n     */\r\n    protected bind<T extends Function>(methodName: string): T | undefined;\r\n    protected bodify(data: any): any;\r\n    protected clone(data: any): any;\r\n    protected collectionHandler(reqInfo: RequestInfo): ResponseOptions;\r\n    /**\r\n     * Commands reconfigure the in-memory web api service or extract information from it.\r\n     * Commands ignore the latency delay and respond ASAP.\r\n     *\r\n     * When the last segment of the `apiBase` path is \"commands\",\r\n     * the `collectionName` is the command.\r\n     *\r\n     * Example URLs:\r\n     *   commands/resetdb (POST) // Reset the \"database\" to its original state\r\n     *   commands/config (GET)   // Return this service's config object\r\n     *   commands/config (POST)  // Update the config (e.g. the delay)\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', undefined);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    protected commands(reqInfo: RequestInfo): Observable<any>;\r\n    protected createErrorResponseOptions(url: string, status: number, message: string): ResponseOptions;\r\n    /**\r\n     * Create standard HTTP headers object from hash map of header strings\r\n     * @param headers\r\n     */\r\n    protected abstract createHeaders(headers: {\r\n        [index: string]: string;\r\n    }): HttpHeaders;\r\n    /**\r\n     * create the function that passes unhandled requests through to the \"real\" backend.\r\n     */\r\n    protected abstract createPassThruBackend(): PassThruBackend;\r\n    /**\r\n     * return a search map from a location query/search string\r\n     */\r\n    protected abstract createQueryMap(search: string): Map<string, string[]>;\r\n    /**\r\n     * Create a cold response Observable from a factory for ResponseOptions\r\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n     * @param withDelay - if true (default), add simulated latency delay from configuration\r\n     */\r\n    protected createResponse$(resOptionsFactory: () => ResponseOptions, withDelay?: boolean): Observable<any>;\r\n    /**\r\n     * Create a Response observable from ResponseOptions observable.\r\n     */\r\n    protected abstract createResponse$fromResponseOptions$(resOptions$: Observable<ResponseOptions>): Observable<any>;\r\n    /**\r\n     * Create a cold Observable of ResponseOptions.\r\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n     */\r\n    protected createResponseOptions$(resOptionsFactory: () => ResponseOptions): Observable<ResponseOptions>;\r\n    protected delete({ collection, collectionName, headers, id, url }: RequestInfo): ResponseOptions;\r\n    /**\r\n     * Find first instance of item in collection by `item.id`\r\n     * @param collection\r\n     * @param id\r\n     */\r\n    protected findById<T extends {\r\n        id: any;\r\n    }>(collection: T[], id: any): T | undefined;\r\n    /**\r\n     * Generate the next available id for item in this collection\r\n     * Use method from `inMemDbService` if it exists and returns a value,\r\n     * else delegates to `genIdDefault`.\r\n     * @param collection - collection of items with `id` key property\r\n     */\r\n    protected genId<T extends {\r\n        id: any;\r\n    }>(collection: T[], collectionName: string): any;\r\n    /**\r\n     * Default generator of the next available id for item in this collection\r\n     * This default implementation works only for numeric ids.\r\n     * @param collection - collection of items with `id` key property\r\n     * @param collectionName - name of the collection\r\n     */\r\n    protected genIdDefault<T extends {\r\n        id: any;\r\n    }>(collection: T[], collectionName: string): any;\r\n    protected get({ collection, collectionName, headers, id, query, url }: RequestInfo): ResponseOptions;\r\n    /** Get JSON body from the request object */\r\n    protected abstract getJsonBody(req: any): any;\r\n    /**\r\n     * Get location info from a url, even on server where `document` is not defined\r\n     */\r\n    protected getLocation(url: string): UriInfo;\r\n    /**\r\n     * get or create the function that passes unhandled requests\r\n     * through to the \"real\" backend.\r\n     */\r\n    protected getPassThruBackend(): PassThruBackend;\r\n    /**\r\n     * Get utility methods from this service instance.\r\n     * Useful within an HTTP method override\r\n     */\r\n    protected getRequestInfoUtils(): RequestInfoUtilities;\r\n    /**\r\n     * return canonical HTTP method name (lowercase) from the request object\r\n     * e.g. (req.method || 'get').toLowerCase();\r\n     * @param req - request object from the http call\r\n     *\r\n     */\r\n    protected abstract getRequestMethod(req: any): string;\r\n    protected indexOf(collection: any[], id: number): number;\r\n    /** Parse the id as a number. Return original value if not a number. */\r\n    protected parseId(collection: any[], collectionName: string, id: string): any;\r\n    /**\r\n     * return true if can determine that the collection's `item.id` is a number\r\n     * This implementation can't tell if the collection is empty so it assumes NO\r\n     * */\r\n    protected isCollectionIdNumeric<T extends {\r\n        id: any;\r\n    }>(collection: T[], collectionName: string): boolean;\r\n    /**\r\n     * Parses the request URL into a `ParsedRequestUrl` object.\r\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n     *\r\n     * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\r\n     *   When apiBase=undefined and url='http://localhost/api/collection/42'\r\n     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\r\n     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\r\n     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\r\n     *   When apiBase='/' and url='http://localhost/collection'\r\n     *     {base: '/', collectionName: 'collection', id: undefined, ...}\r\n     *\r\n     * The actual api base segment values are ignored. Only the number of segments matters.\r\n     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\r\n     *\r\n     * To replace this default method, assign your alternative to your\r\n     * InMemDbService['parseRequestUrl']\r\n     */\r\n    protected parseRequestUrl(url: string): ParsedRequestUrl;\r\n    protected post({ collection, collectionName, headers, id, req, resourceUrl, url }: RequestInfo): ResponseOptions;\r\n    protected put({ collection, collectionName, headers, id, req, url }: RequestInfo): ResponseOptions;\r\n    protected removeById(collection: any[], id: number): boolean;\r\n    /**\r\n     * Tell your in-mem \"database\" to reset.\r\n     * returns Observable of the database because resetting it could be async\r\n     */\r\n    protected resetDb(reqInfo?: RequestInfo): Observable<boolean>;\r\n}\r\n\r\n/**\r\n * get the status text from StatusCode\r\n */\r\nexport declare function getStatusText(code: number): string;\r\n\r\n/**\r\n * For Angular `HttpClient` simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService`.\r\n * Conforms mostly to behavior described here:\r\n * https://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create an in-memory data store class that implements `InMemoryDbService`.\r\n * Call `config` static method with this service class and optional configuration object:\r\n * ```\r\n * // other imports\r\n * import { HttpClientModule } from '@angular/common/http';\r\n * import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n *\r\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\r\n * @NgModule({\r\n *  imports: [\r\n *    HttpModule,\r\n *    HttpClientInMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\r\n *    ...\r\n *  ],\r\n *  ...\r\n * })\r\n * export class AppModule { ... }\r\n * ```\r\n */\r\nexport declare class HttpClientBackendService extends BackendService implements HttpBackend {\r\n    private xhrFactory;\r\n    constructor(inMemDbService: InMemoryDbService, config: InMemoryBackendConfigArgs, xhrFactory: XhrFactory);\r\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\r\n    protected getJsonBody(req: HttpRequest<any>): any;\r\n    protected getRequestMethod(req: HttpRequest<any>): string;\r\n    protected createHeaders(headers: {\r\n        [index: string]: string;\r\n    }): HttpHeaders;\r\n    protected createQueryMap(search: string): Map<string, string[]>;\r\n    protected createResponse$fromResponseOptions$(resOptions$: Observable<ResponseOptions>): Observable<HttpResponse<any>>;\r\n    protected createPassThruBackend(): HttpXhrBackend;\r\n}\r\n\r\nexport declare function httpClientInMemBackendServiceFactory(dbService: InMemoryDbService, options: InMemoryBackendConfig, xhrFactory: XhrFactory): HttpBackend;\r\n\r\nexport declare class HttpClientInMemoryWebApiModule {\r\n    /**\r\n     *  Redirect the Angular `HttpClient` XHR calls\r\n     *  to in-memory data store that implements `InMemoryDbService`.\r\n     *  with class that implements InMemoryDbService and creates an in-memory database.\r\n     *\r\n     *  Usually imported in the root application module.\r\n     *  Can import in a lazy feature module too, which will shadow modules loaded earlier\r\n     *\r\n     * @param dbCreator - Class that creates seed data for in-memory database. Must implement\r\n     *     InMemoryDbService.\r\n     * @param [options]\r\n     *\r\n     * @example\r\n     * HttpInMemoryWebApiModule.forRoot(dbCreator);\r\n     * HttpInMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n     */\r\n    static forRoot(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs): ModuleWithProviders<HttpClientInMemoryWebApiModule>;\r\n    /**\r\n     *\r\n     * Enable and configure the in-memory web api in a lazy-loaded feature module.\r\n     * Same as `forRoot`.\r\n     * This is a feel-good method so you can follow the Angular style guide for lazy-loaded modules.\r\n     */\r\n    static forFeature(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs): ModuleWithProviders<HttpClientInMemoryWebApiModule>;\r\n}\r\n\r\n/**\r\n *  InMemoryBackendService configuration options\r\n *  Usage:\r\n *    InMemoryWebApiModule.forRoot(InMemHeroService, {delay: 600})\r\n *\r\n *  or if providing separately:\r\n *    provide(InMemoryBackendConfig, {useValue: {delay: 600}}),\r\n */\r\nexport declare class InMemoryBackendConfig implements InMemoryBackendConfigArgs {\r\n    constructor(config?: InMemoryBackendConfigArgs);\r\n}\r\n\r\n/**\r\n * Interface for InMemoryBackend configuration options\r\n */\r\nexport declare abstract class InMemoryBackendConfigArgs {\r\n    /**\r\n     * The base path to the api, e.g, 'api/'.\r\n     * If not specified than `parseRequestUrl` assumes it is the first path segment in the request.\r\n     */\r\n    apiBase?: string;\r\n    /**\r\n     * false (default) if search match should be case insensitive\r\n     */\r\n    caseSensitiveSearch?: boolean;\r\n    /**\r\n     * false (default) put content directly inside the response body.\r\n     * true: encapsulate content in a `data` property inside the response body, `{ data: ... }`.\r\n     */\r\n    dataEncapsulation?: boolean;\r\n    /**\r\n     * delay (in ms) to simulate latency\r\n     */\r\n    delay?: number;\r\n    /**\r\n     * false (default) should 204 when object-to-delete not found; true: 404\r\n     */\r\n    delete404?: boolean;\r\n    /**\r\n     * host for this service, e.g., 'localhost'\r\n     */\r\n    host?: string;\r\n    /**\r\n     * false (default) should pass unrecognized request URL through to original backend; true: 404\r\n     */\r\n    passThruUnknownUrl?: boolean;\r\n    /**\r\n     * true (default) should NOT return the item (204) after a POST. false: return the item (200).\r\n     */\r\n    post204?: boolean;\r\n    /**\r\n     * false (default) should NOT update existing item with POST. false: OK to update.\r\n     */\r\n    post409?: boolean;\r\n    /**\r\n     * true (default) should NOT return the item (204) after a POST. false: return the item (200).\r\n     */\r\n    put204?: boolean;\r\n    /**\r\n     * false (default) if item not found, create as new item; false: should 404.\r\n     */\r\n    put404?: boolean;\r\n    /**\r\n     * root path _before_ any API call, e.g., ''\r\n     */\r\n    rootPath?: string;\r\n}\r\n\r\n/**\r\n * Interface for a class that creates an in-memory database\r\n *\r\n * Its `createDb` method creates a hash of named collections that represents the database\r\n *\r\n * For maximum flexibility, the service may define HTTP method overrides.\r\n * Such methods must match the spelling of an HTTP method in lower case (e.g, \"get\").\r\n * If a request has a matching method, it will be called as in\r\n * `get(info: requestInfo, db: {})` where `db` is the database object described above.\r\n */\r\nexport declare abstract class InMemoryDbService {\r\n    /**\r\n     * Creates an in-memory \"database\" hash whose keys are collection names\r\n     * and whose values are arrays of collection objects to return or update.\r\n     *\r\n     * returns Observable of the database because could have to create it asynchronously.\r\n     *\r\n     * This method must be safe to call repeatedly.\r\n     * Each time it should return a new object with new arrays containing new item objects.\r\n     * This condition allows the in-memory backend service to mutate the collections\r\n     * and their items without touching the original source data.\r\n     *\r\n     * The in-mem backend service calls this method without a value the first time.\r\n     * The service calls it with the `RequestInfo` when it receives a POST `commands/resetDb` request.\r\n     * Your InMemoryDbService can adjust its behavior accordingly.\r\n     */\r\n    abstract createDb(reqInfo?: RequestInfo): {} | Observable<{}> | Promise<{}>;\r\n}\r\n\r\nexport declare class InMemoryWebApiModule {\r\n    /**\r\n     *  Redirect BOTH Angular `Http` and `HttpClient` XHR calls\r\n     *  to in-memory data store that implements `InMemoryDbService`.\r\n     *  with class that implements InMemoryDbService and creates an in-memory database.\r\n     *\r\n     *  Usually imported in the root application module.\r\n     *  Can import in a lazy feature module too, which will shadow modules loaded earlier\r\n     *\r\n     * @param dbCreator - Class that creates seed data for in-memory database. Must implement\r\n     *     InMemoryDbService.\r\n     * @param [options]\r\n     *\r\n     * @example\r\n     * InMemoryWebApiModule.forRoot(dbCreator);\r\n     * InMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n     */\r\n    static forRoot(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs): ModuleWithProviders<InMemoryWebApiModule>;\r\n    /**\r\n     *\r\n     * Enable and configure the in-memory web api in a lazy-loaded feature module.\r\n     * Same as `forRoot`.\r\n     * This is a feel-good method so you can follow the Angular style guide for lazy-loaded modules.\r\n     */\r\n    static forFeature(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs): ModuleWithProviders<InMemoryWebApiModule>;\r\n}\r\n\r\n/**\r\n * Returns true if the Http Status Code is 200-299 (success)\r\n */\r\nexport declare function isSuccess(status: number): boolean;\r\n\r\n/**\r\n *\r\n * Interface for the result of the `parseRequestUrl` method:\r\n *   Given URL \"http://localhost:8080/api/customers/42?foo=1 the default implementation returns\r\n *     base: 'api/'\r\n *     collectionName: 'customers'\r\n *     id: '42'\r\n *     query: this.createQuery('foo=1')\r\n *     resourceUrl: 'http://localhost/api/customers/'\r\n */\r\nexport declare interface ParsedRequestUrl {\r\n    apiBase: string;\r\n    collectionName: string;\r\n    id: string;\r\n    query: Map<string, string[]>;\r\n    resourceUrl: string;\r\n}\r\n\r\n/** Return information (UriInfo) about a URI  */\r\nexport declare function parseUri(str: string): UriInfo;\r\n\r\nexport declare interface PassThruBackend {\r\n    /**\r\n     * Handle an HTTP request and return an Observable of HTTP response\r\n     * Both the request type and the response type are determined by the supporting HTTP library.\r\n     */\r\n    handle(req: any): Observable<any>;\r\n}\r\n\r\nexport declare function removeTrailingSlash(path: string): string;\r\n\r\n/**\r\n *  Minimum definition needed by base class\r\n */\r\nexport declare interface RequestCore {\r\n    url: string;\r\n    urlWithParams?: string;\r\n}\r\n\r\n/**\r\n * Interface for object w/ info about the current request url\r\n * extracted from an Http Request.\r\n * Also holds utility methods and configuration data from this service\r\n */\r\nexport declare interface RequestInfo {\r\n    req: RequestCore;\r\n    apiBase: string;\r\n    collectionName: string;\r\n    collection: any;\r\n    headers: HttpHeaders;\r\n    method: string;\r\n    id: any;\r\n    query: Map<string, string[]>;\r\n    resourceUrl: string;\r\n    url: string;\r\n    utils: RequestInfoUtilities;\r\n}\r\n\r\n/**\r\n * Interface for utility methods from this service instance.\r\n * Useful within an HTTP method override\r\n */\r\nexport declare interface RequestInfoUtilities {\r\n    /**\r\n     * Create a cold response Observable from a factory for ResponseOptions\r\n     * the same way that the in-mem backend service does.\r\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\r\n     * @param withDelay - if true (default), add simulated latency delay from configuration\r\n     */\r\n    createResponse$: (resOptionsFactory: () => ResponseOptions) => Observable<any>;\r\n    /**\r\n     * Find first instance of item in collection by `item.id`\r\n     * @param collection\r\n     * @param id\r\n     */\r\n    findById<T extends {\r\n        id: any;\r\n    }>(collection: T[], id: any): T | undefined;\r\n    /** return the current, active configuration which is a blend of defaults and overrides */\r\n    getConfig(): InMemoryBackendConfigArgs;\r\n    /** Get the in-mem service's copy of the \"database\" */\r\n    getDb(): {};\r\n    /** Get JSON body from the request object */\r\n    getJsonBody(req: any): any;\r\n    /** Get location info from a url, even on server where `document` is not defined */\r\n    getLocation(url: string): UriInfo;\r\n    /** Get (or create) the \"real\" backend */\r\n    getPassThruBackend(): PassThruBackend;\r\n    /**\r\n     * return true if can determine that the collection's `item.id` is a number\r\n     * */\r\n    isCollectionIdNumeric<T extends {\r\n        id: any;\r\n    }>(collection: T[], collectionName: string): boolean;\r\n    /**\r\n     * Parses the request URL into a `ParsedRequestUrl` object.\r\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\r\n     */\r\n    parseRequestUrl(url: string): ParsedRequestUrl;\r\n}\r\n\r\n/**\r\n * Provide a `responseInterceptor` method of this type in your `inMemDbService` to\r\n * morph the response options created in the `collectionHandler`.\r\n */\r\nexport declare type ResponseInterceptor = (res: ResponseOptions, ri: RequestInfo) => ResponseOptions;\r\n\r\nexport declare interface ResponseOptions {\r\n    /**\r\n     * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\r\n     */\r\n    body?: string | Object | ArrayBuffer | Blob;\r\n    /**\r\n     * Response headers\r\n     */\r\n    headers?: HttpHeaders;\r\n    /**\r\n     * Http {@link https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\r\n     * associated with the response.\r\n     */\r\n    status?: number;\r\n    /**\r\n     * Status text for the status code\r\n     */\r\n    statusText?: string;\r\n    /**\r\n     * request url\r\n     */\r\n    url?: string;\r\n}\r\n\r\n\r\nexport declare const STATUS: {\r\n    CONTINUE: number;\r\n    SWITCHING_PROTOCOLS: number;\r\n    OK: number;\r\n    CREATED: number;\r\n    ACCEPTED: number;\r\n    NON_AUTHORITATIVE_INFORMATION: number;\r\n    NO_CONTENT: number;\r\n    RESET_CONTENT: number;\r\n    PARTIAL_CONTENT: number;\r\n    MULTIPLE_CHOICES: number;\r\n    MOVED_PERMANTENTLY: number;\r\n    FOUND: number;\r\n    SEE_OTHER: number;\r\n    NOT_MODIFIED: number;\r\n    USE_PROXY: number;\r\n    TEMPORARY_REDIRECT: number;\r\n    BAD_REQUEST: number;\r\n    UNAUTHORIZED: number;\r\n    PAYMENT_REQUIRED: number;\r\n    FORBIDDEN: number;\r\n    NOT_FOUND: number;\r\n    METHOD_NOT_ALLOWED: number;\r\n    NOT_ACCEPTABLE: number;\r\n    PROXY_AUTHENTICATION_REQUIRED: number;\r\n    REQUEST_TIMEOUT: number;\r\n    CONFLICT: number;\r\n    GONE: number;\r\n    LENGTH_REQUIRED: number;\r\n    PRECONDITION_FAILED: number;\r\n    PAYLOAD_TO_LARGE: number;\r\n    URI_TOO_LONG: number;\r\n    UNSUPPORTED_MEDIA_TYPE: number;\r\n    RANGE_NOT_SATISFIABLE: number;\r\n    EXPECTATION_FAILED: number;\r\n    IM_A_TEAPOT: number;\r\n    UPGRADE_REQUIRED: number;\r\n    INTERNAL_SERVER_ERROR: number;\r\n    NOT_IMPLEMENTED: number;\r\n    BAD_GATEWAY: number;\r\n    SERVICE_UNAVAILABLE: number;\r\n    GATEWAY_TIMEOUT: number;\r\n    HTTP_VERSION_NOT_SUPPORTED: number;\r\n    PROCESSING: number;\r\n    MULTI_STATUS: number;\r\n    IM_USED: number;\r\n    PERMANENT_REDIRECT: number;\r\n    UNPROCESSABLE_ENTRY: number;\r\n    LOCKED: number;\r\n    FAILED_DEPENDENCY: number;\r\n    PRECONDITION_REQUIRED: number;\r\n    TOO_MANY_REQUESTS: number;\r\n    REQUEST_HEADER_FIELDS_TOO_LARGE: number;\r\n    UNAVAILABLE_FOR_LEGAL_REASONS: number;\r\n    VARIANT_ALSO_NEGOTIATES: number;\r\n    INSUFFICIENT_STORAGE: number;\r\n    NETWORK_AUTHENTICATION_REQUIRED: number;\r\n};\r\n\r\nexport declare const STATUS_CODE_INFO: {\r\n    [key: string]: {\r\n        code: number;\r\n        text: string;\r\n        description: string;\r\n        spec_title: string;\r\n        spec_href: string;\r\n    };\r\n};\r\n\r\n/** Interface of information about a Uri  */\r\nexport declare interface UriInfo {\r\n    source: string;\r\n    protocol: string;\r\n    authority: string;\r\n    userInfo: string;\r\n    user: string;\r\n    password: string;\r\n    host: string;\r\n    port: string;\r\n    relative: string;\r\n    path: string;\r\n    directory: string;\r\n    file: string;\r\n    query: string;\r\n    anchor: string;\r\n}\r\n\r\nexport { }\r\n"]}